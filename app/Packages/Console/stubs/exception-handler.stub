<?php

namespace App\Exceptions;

use Exception;
use Illuminate\Support\Arr;
use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;

class Handler extends ExceptionHandler
{
    /**
     * A list of the exception types that are not reported.
     *
     * @var array
     */
    protected $dontReport = [];

    /**
     * A list of the inputs that are never flashed for validation exceptions.
     *
     * @var array
     */
    protected $dontFlash = [
        'password',
        'password_confirmation',
    ];

    /**
     * Report or log an exception.
     *
     * @param  \Exception $exception
     * @return void
     */
    public function report(Exception $exception)
    {
        parent::report($exception);
    }

    /**
     * Render an exception into an HTTP response.
     *
     * @param  \Illuminate\Http\Request    $request
     * @param  \Exception                  $exception
     * @return \Illuminate\Http\Response
     */
    public function render($request, Exception $exception)
    {
        // 自定义异常
        if ($exception instanceof \Exception) {
            if ($exception->getCode() === 900) {
                $message = $exception->getMessage();
                $result  = json_decode($message, true);
                return response()->json($result);
            }
        }

        //拦截错误信息，通过公共格式返回错误信息。
        if ($request->expectsJson()) {
            $trace = $exception->getTrace();
            $func  = function ($trace) {
                return Arr::except($trace, ['args']);
            };
            $debug = [
                'message'   => $exception->getMessage(),
                'exception' => get_class($exception),
                'file'      => $exception->getFile(),
                'line'      => $exception->getLine(),
                'trace'     => collect($trace)->map($func)->all(),
            ];

            $message = $exception->getMessage();
            $result  = real()->code(500)->debug($debug)->error($message);
            return response()->json($result);
        }
        //----end----
        return parent::render($request, $exception);
    }
}
